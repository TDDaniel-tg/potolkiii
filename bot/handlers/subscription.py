from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.main import (
    get_subscription_keyboard,
    get_payment_keyboard,
    get_back_to_menu_keyboard
)
from bot.database.models import db
from config.settings import settings
from datetime import datetime, timedelta
import logging
import uuid

try:
    from yookassa import Configuration, Payment
    from yookassa.domain.common import SecurityHelper
    YOOKASSA_AVAILABLE = True
    if settings.YOOKASSA_SHOP_ID and settings.YOOKASSA_SECRET_KEY:
        Configuration.account_id = settings.YOOKASSA_SHOP_ID
        Configuration.secret_key = settings.YOOKASSA_SECRET_KEY
except:
    YOOKASSA_AVAILABLE = False

logger = logging.getLogger(__name__)

router = Router()


class PaymentStates(StatesGroup):
    waiting_for_payment = State()


@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def show_subscription_menu(message: types.Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await db.get_active_subscription(user_id)
    user = await db.get_user(user_id)
    
    if subscription == 'free':
        text = "üí≥ **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π**\n\n"
        text += "üìä –õ–∏–º–∏—Ç: 2 —Ä–∞—Å—á–µ—Ç–∞ –≤ –¥–µ–Ω—å\n\n"
    else:
        expires = user.get('subscription_expires')
        if expires:
            expires_date = datetime.fromisoformat(expires).strftime("%d.%m.%Y")
            text = f"üí≥ **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {subscription.title()}**\n"
            text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n\n"
        else:
            text = "üí≥ **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π**\n\n"
    
    text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**\n\n"
    text += "üì¶ **–ë–∞–∑–æ–≤—ã–π** - 199‚ÇΩ/–º–µ—Å\n‚Ä¢ 50 —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –º–µ—Å—è—Ü\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤\n‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
    text += "üöÄ **–ü—Ä–æ—Ñ–∏** - 399‚ÇΩ/–º–µ—Å\n‚Ä¢ 200 —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –º–µ—Å—è—Ü\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
    text += "‚ôæÔ∏è **–ë–µ–∑–ª–∏–º–∏—Ç** - 799‚ÇΩ/–º–µ—Å\n‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ —Ä–∞—Å—á–µ—Ç–æ–≤\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤\n‚Ä¢ VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
    
    await message.answer(
        text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("subscribe:"))
async def process_subscription_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    plan_type = callback.data.split(":")[1]
    
    if not YOOKASSA_AVAILABLE or not settings.YOOKASSA_SHOP_ID:
        await callback.answer(
            "‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            show_alert=True
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    price = settings.SUBSCRIPTION_PRICES[plan_type]
    plan_names = {
        'basic': '–ë–∞–∑–æ–≤—ã–π',
        'pro': '–ü—Ä–æ—Ñ–∏',
        'unlimited': '–ë–µ–∑–ª–∏–º–∏—Ç'
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        idempotence_key = str(uuid.uuid4())
        
        payment = Payment.create({
            "amount": {
                "value": f"{price}.00",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{settings.BOT_USERNAME}"
            },
            "capture": True,
            "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan_names[plan_type]} –Ω–∞ 1 –º–µ—Å—è—Ü",
            "metadata": {
                "user_id": str(callback.from_user.id),
                "plan_type": plan_type
            }
        }, idempotence_key)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        await db.save_payment(
            user_id=callback.from_user.id,
            payment_id=payment.id,
            plan_type=plan_type,
            amount=price
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            payment_id=payment.id,
            plan_type=plan_type
        )
        await state.set_state(PaymentStates.waiting_for_payment)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await callback.message.edit_text(
            f"üí≥ **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            f"–¢–∞—Ä–∏—Ñ: **{plan_names[plan_type]}**\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: **{price}‚ÇΩ**\n"
            f"–°—Ä–æ–∫: 1 –º–µ—Å—è—Ü\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
            reply_markup=get_payment_keyboard(payment.confirmation.confirmation_url),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
    
    await callback.answer()


@router.callback_query(F.data == "check_payment")
async def check_payment_status(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    data = await state.get_data()
    payment_id = data.get('payment_id')
    plan_type = data.get('plan_type')
    
    if not payment_id:
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment = Payment.find_one(payment_id)
        
        if payment.status == 'succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            user_id = callback.from_user.id
            expires = datetime.now() + timedelta(days=30)
            
            await db.update_user_subscription(
                telegram_id=user_id,
                subscription_type=plan_type,
                expires=expires
            )
            
            await db.update_payment_status(payment_id, 'succeeded')
            
            plan_names = {
                'basic': '–ë–∞–∑–æ–≤—ã–π',
                'pro': '–ü—Ä–æ—Ñ–∏',
                'unlimited': '–ë–µ–∑–ª–∏–º–∏—Ç'
            }
            
            await callback.message.edit_text(
                f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω!**\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ **{plan_names[plan_type]}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y')}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üéâ",
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode="Markdown"
            )
            
            await state.clear()
            
        elif payment.status == 'pending' or payment.status == 'waiting_for_capture':
            await callback.answer(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
                show_alert=True
            )
        else:
            await callback.answer(
                f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –°—Ç–∞—Ç—É—Å: {payment.status}",
                show_alert=True
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            show_alert=True
        )


# –§–∏–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ (–∫–æ–≥–¥–∞ YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
@router.callback_query(F.data.startswith("demo_activate:"))
async def demo_activate_subscription(callback: types.CallbackQuery):
    """–î–µ–º–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if YOOKASSA_AVAILABLE and settings.YOOKASSA_SHOP_ID:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É", show_alert=True)
        return
    
    plan_type = callback.data.split(":")[1]
    user_id = callback.from_user.id
    expires = datetime.now() + timedelta(days=30)
    
    await db.update_user_subscription(
        telegram_id=user_id,
        subscription_type=plan_type,
        expires=expires
    )
    
    plan_names = {
        'basic': '–ë–∞–∑–æ–≤—ã–π',
        'pro': '–ü—Ä–æ—Ñ–∏',
        'unlimited': '–ë–µ–∑–ª–∏–º–∏—Ç'
    }
    
    await callback.message.edit_text(
        f"‚úÖ **–î–µ–º–æ-—Ä–µ–∂–∏–º: –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
        f"–¢–∞—Ä–∏—Ñ **{plan_names[plan_type]}** –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {expires.strftime('%d.%m.%Y')}\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞.",
        reply_markup=get_back_to_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer() 