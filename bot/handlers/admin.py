from aiogram import Router, types, F
from aiogram.filters import Command
from bot.database.models import db
from config.settings import settings
import logging

logger = logging.getLogger(__name__)

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.ADMIN_IDS


@router.message(Command("admin"))
async def admin_help(message: types.Message):
    """–ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    help_text = """
üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´**

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:**
/set_sub <user_id> <type> [days] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/user_info <user_id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/unlimited <user_id> - –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞

**–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:**
‚Ä¢ free - –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è
‚Ä¢ basic - –ë–∞–∑–æ–≤–∞—è (50 —Ä–∞—Å—á–µ—Ç–æ–≤/–º–µ—Å)
‚Ä¢ pro - –ü—Ä–æ—Ñ–∏ (200 —Ä–∞—Å—á–µ—Ç–æ–≤/–º–µ—Å)  
‚Ä¢ unlimited - –ë–µ–∑–ª–∏–º–∏—Ç

**–ü—Ä–∏–º–µ—Ä—ã:**
/unlimited 123456789
/set_sub 123456789 pro 30
/user_info 123456789
    """
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("unlimited"))
async def set_unlimited_subscription(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unlimited <user_id>"
        )
        return
    
    try:
        user_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    success = await db.set_admin_subscription(user_id, "unlimited", 365 * 10)
    
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!"
        )
        logger.info(f"Admin {message.from_user.id} set unlimited subscription for user {user_id}")
    else:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
        )


@router.message(Command("set_sub"))
async def set_subscription(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_sub <user_id> <type> [days]\n\n"
            "–¢–∏–ø—ã: free, basic, pro, unlimited\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 365 –¥–Ω–µ–π"
        )
        return
    
    try:
        user_id = int(parts[1])
        sub_type = parts[2]
        days = int(parts[3]) if len(parts) > 3 else 365
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    valid_types = ["free", "basic", "pro", "unlimited"]
    if sub_type not in valid_types:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_types)}"
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    success = await db.set_admin_subscription(user_id, sub_type, days)
    
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ '{sub_type}' –Ω–∞ {days} –¥–Ω–µ–π!"
        )
        logger.info(f"Admin {message.from_user.id} set {sub_type} subscription for user {user_id} for {days} days")
    else:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
        )


@router.message(Command("user_info"))
async def get_user_info(message: types.Message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /user_info <user_id>"
        )
        return
    
    try:
        user_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await db.get_user_info_admin(user_id)
    
    if not user_info:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    text = f"""
üë§ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï**

üÜî **ID:** {user_info['telegram_id']}
üë§ **–ò–º—è:** {user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üîó **Username:** @{user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üí≥ **–ü–æ–¥–ø–∏—Å–∫–∞:** {user_info['subscription_type']}
üìÖ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {user_info.get('subscription_expires', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:10] if user_info.get('subscription_expires') else '–ù–∏–∫–æ–≥–¥–∞'}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {user_info['total_calculations']}
‚Ä¢ –†–∞—Å—á–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_info['daily_calculations']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á–µ—Ç: {user_info.get('last_calculation', '–ù–∏–∫–æ–≥–¥–∞')[:10] if user_info.get('last_calculation') else '–ù–∏–∫–æ–≥–¥–∞'}

üí∞ **–ü–ª–∞—Ç–µ–∂–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {user_info['total_payments']}
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user_info['total_spent']:.2f} ‚ÇΩ

üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user_info['created_at'][:10]}
    """
    
    await message.answer(text.strip(), parse_mode="Markdown") 