from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.main import (
    get_calculation_type_keyboard,
    get_confirmation_keyboard,
    get_confirmation_with_fabric_keyboard,
    get_fabric_width_keyboard,
    get_manual_input_keyboard,
    get_back_to_menu_keyboard,
    get_main_keyboard
)
from bot.database.models import db
from bot.utils.gemini_api import recognizer
from bot.utils.calculator import calculator
from bot.utils.image_processor import image_processor
from config.settings import settings
import logging
import io
import json
from datetime import datetime

logger = logging.getLogger(__name__)

router = Router()


class CalculationStates(StatesGroup):
    choosing_type = State()
    waiting_for_photo = State()
    confirming_measurements = State()
    manual_input = State()


@router.message(F.text == "üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã")
async def start_calculation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await db.get_active_subscription(user_id)
    calculations_today = await db.get_user_calculations_today(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    limit = settings.SUBSCRIPTION_LIMITS.get(subscription, 2)
    
    if subscription == 'free' and calculations_today >= limit:
        await message.answer(
            "‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (2 –≤ –¥–µ–Ω—å).\n\n"
            "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–π - 50 —Ä–∞—Å—á–µ—Ç–æ–≤/–º–µ—Å—è—Ü (199‚ÇΩ)\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–∏ - 200 —Ä–∞—Å—á–µ—Ç–æ–≤/–º–µ—Å—è—Ü (399‚ÇΩ)\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ (799‚ÇΩ)\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üí≥ –ü–æ–¥–ø–∏—Å–∫–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        return
    
    elif subscription != 'unlimited' and subscription != 'free':
        # –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        pass
    
    await state.set_state(CalculationStates.choosing_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=get_calculation_type_keyboard()
    )


@router.callback_query(F.data.startswith("calc_type:"))
async def process_calculation_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    calc_type = callback.data.split(":")[1]
    
    await state.update_data(calculation_type=calc_type)
    
    type_text = {
        "perimeter": "üìê –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–∞",
        "area": "üìè –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏", 
        "fabric": "üßµ –†–∞—Å—á–µ—Ç —Ç–∫–∞–Ω–∏",
        "both": "üìêüìè –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç",
        "complete": "üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç"
    }
    
    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ä–∞—Å—á–µ—Ç —Ç–∫–∞–Ω–∏, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —à–∏—Ä–∏–Ω—É —Ä—É–ª–æ–Ω–∞
    if calc_type in ['fabric', 'complete']:
        await callback.message.edit_text(
            f"{type_text[calc_type]}\n\n"
            "üßµ –í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ä—É–ª–æ–Ω–∞ —Ç–∫–∞–Ω–∏:",
            reply_markup=get_fabric_width_keyboard()
        )
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
        await state.set_state(CalculationStates.waiting_for_photo)
        await callback.message.edit_text(
            f"{type_text[calc_type]}\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∑–∞–º–µ—Ä–∞–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è.\n\n"
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω—ã\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞",
            reply_markup=get_manual_input_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("fabric_width:"))
async def process_fabric_width(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ç–∫–∞–Ω–∏"""
    fabric_width = int(callback.data.split(":")[1])
    data = await state.get_data()
    calc_type = data.get('calculation_type', 'fabric')
    
    await state.update_data(fabric_width=fabric_width)
    await state.set_state(CalculationStates.waiting_for_photo)
    
    type_text = {
        "fabric": "üßµ –†–∞—Å—á–µ—Ç —Ç–∫–∞–Ω–∏",
        "complete": "üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç"
    }
    
    await callback.message.edit_text(
        f"{type_text[calc_type]}\n"
        f"üßµ –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞: {fabric_width} —Å–º\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∑–∞–º–µ—Ä–∞–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è.\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
        "‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω—ã\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞",
        reply_markup=get_manual_input_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "change_fabric_width")
async def change_fabric_width(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Ç–∫–∞–Ω–∏"""
    await callback.message.edit_text(
        "üßµ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —à–∏—Ä–∏–Ω—É —Ä—É–ª–æ–Ω–∞ —Ç–∫–∞–Ω–∏:",
        reply_markup=get_fabric_width_keyboard()
    )
    await callback.answer()


@router.message(CalculationStates.waiting_for_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∑–∞–º–µ—Ä–∞–º–∏"""
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_bytes = io.BytesIO()
        await message.bot.download_file(file.file_path, photo_bytes)
        photo_data = photo_bytes.getvalue()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        is_valid, error_msg = await image_processor.validate_image(photo_data)
        if not is_valid:
            await message.answer(
                f"‚ùå {error_msg}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é.",
                reply_markup=get_manual_input_keyboard()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        processed_image = await image_processor.process_image(photo_data)
        if not processed_image:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é.",
                reply_markup=get_manual_input_keyboard()
            )
            return
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        await message.answer("ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–∞–∑–º–µ—Ä—ã...")
        recognition_result = await recognizer.recognize_measurements(processed_image)
        
        if not recognition_result or not await recognizer.validate_recognition(recognition_result):
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –†–∞–∑–º–µ—Ä—ã –ø–ª–æ—Ö–æ –≤–∏–¥–Ω—ã\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
                "‚Ä¢ –ù–µ—á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é.",
                reply_markup=get_manual_input_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        await state.update_data(recognition_data=recognition_result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        formatted_text = recognizer.format_measurements_text(recognition_result)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        data = await state.get_data()
        calc_type = data.get('calculation_type', 'both')
        
        if calc_type in ['fabric', 'complete']:
            keyboard = get_confirmation_with_fabric_keyboard()
        else:
            keyboard = get_confirmation_keyboard()
        
        await message.answer(
            f"‚úÖ –†–∞–∑–º–µ—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!\n\n{formatted_text}\n\n"
            "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=keyboard
        )
        
        await state.set_state(CalculationStates.confirming_measurements)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_manual_input_keyboard()
        )


@router.callback_query(F.data == "manual_input")
async def start_manual_input(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    await state.set_state(CalculationStates.manual_input)
    
    data = await state.get_data()
    calc_type = data.get('calculation_type', 'both')
    fabric_width = data.get('fabric_width')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
    if calc_type in ['fabric', 'complete']:
        if fabric_width:
            fabric_info = f"üßµ –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞: {fabric_width} —Å–º\n"
        else:
            fabric_info = "üßµ –†–∞—Å—á–µ—Ç —Ç–∫–∞–Ω–∏ –≤–∫–ª—é—á–µ–Ω\n"
    else:
        fabric_info = ""
    
    example = "3.5 x 2.8" if calc_type in ['perimeter', 'area', 'fabric', 'both', 'complete'] else "3.5 2.8 3.5 2.8"
    
    type_names = {
        'perimeter': '–ø–µ—Ä–∏–º–µ—Ç—Ä–∞',
        'area': '–ø–ª–æ—â–∞–¥–∏',
        'fabric': '—Ç–∫–∞–Ω–∏',
        'both': '–ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –∏ –ø–ª–æ—â–∞–¥–∏',
        'complete': '–ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞'
    }
    
    await callback.message.edit_text(
        f"üìù **–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–æ–≤**\n"
        f"üéØ –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞: {type_names.get(calc_type, '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π')}\n"
        f"{fabric_info}\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö –∏–ª–∏ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö.\n\n"
        f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        f"‚Ä¢ –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: `{example}`\n"
        f"‚Ä¢ –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: `350 280` (–≤ —Å–º)\n"
        f"‚Ä¢ –°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞: `3.5 2.8 1.2 0.9 2.3 1.9`\n\n"
        "–ß–∏—Å–ª–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ –∑–Ω–∞–∫–æ–º x",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.message(CalculationStates.manual_input)
async def process_manual_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    data = await state.get_data()
    calc_type = data.get('calculation_type', 'both')
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    recognition_data = calculator.parse_manual_input(message.text, calc_type)
    
    if not recognition_data:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–∞.\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n"
            "‚Ä¢ `3.5 x 2.8`\n"
            "‚Ä¢ `350 280`\n"
            "‚Ä¢ `3.5 2.8 1.2 0.9`",
            parse_mode="Markdown"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    await state.update_data(recognition_data=recognition_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    formatted_text = recognizer.format_measurements_text(recognition_data)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    calc_type = data.get('calculation_type', 'both')
    
    if calc_type in ['fabric', 'complete']:
        keyboard = get_confirmation_with_fabric_keyboard()
    else:
        keyboard = get_confirmation_keyboard()
    
    await message.answer(
        f"‚úÖ –†–∞–∑–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n\n{formatted_text}\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.set_state(CalculationStates.confirming_measurements)


@router.callback_query(F.data == "confirm_measurements")
async def confirm_and_calculate(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"""
    data = await state.get_data()
    recognition_data = data.get('recognition_data')
    calc_type = data.get('calculation_type', 'both')
    fabric_width = data.get('fabric_width')
    user_id = callback.from_user.id
    
    if not recognition_data:
        await callback.message.edit_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–º–µ—â–µ–Ω–∏–π
        rooms = recognition_data.get('rooms', [])
        if not rooms:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π
            if 'room_type' in recognition_data and 'measurements' in recognition_data:
                recognition_data = {
                    'rooms': [{
                        'room_number': 1,
                        'room_type': recognition_data['room_type'],
                        'measurements': recognition_data['measurements'],
                        'position': '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
                        'confidence': recognition_data.get('confidence', 0.95)
                    }],
                    'total_rooms_found': 1
                }
                rooms = recognition_data['rooms']
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
        results = calculator.calculate_multiple_rooms(recognition_data, calc_type, fabric_width)
        
        if not results:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã.",
                reply_markup=get_back_to_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = calculator.format_multiple_results_text(results, calc_type)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for result in results:
            room_number = result.get('room_number', 1)
            position = result.get('position', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
            room_description = f"–ü–æ–º–µ—â–µ–Ω–∏–µ #{room_number} ({position})"
            
            await db.save_calculation(
                user_id=user_id,
                calculation_type=calc_type,
                room_type=result.get('room_type'),
                measurements=result.get('measurements', []),
                perimeter=result.get('perimeter', {}).get('value_m'),
                area=result.get('area', {}).get('value_m2'),
                room_description=room_description
            )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        await db.increment_user_calculations(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(result_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º
            parts = result_text.split('='*30)
            header = parts[0]
            
            await callback.message.edit_text(
                header + "\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...",
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode="Markdown"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for i, part in enumerate(parts[1:], 1):
                if part.strip():
                    room_text = f"{'='*30}{part}"
                    if len(room_text) > 4000:
                        # –ï—Å–ª–∏ –∏ –æ–¥–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
                        room_text = room_text[:3900] + "\n...\n(–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã)"
                    
                    await callback.message.answer(
                        room_text,
                        parse_mode="Markdown"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if "–ò–¢–û–ì–û –ü–û –í–°–ï–ú –ü–û–ú–ï–©–ï–ù–ò–Ø–ú" in result_text:
                summary_start = result_text.find("üìä **–ò–¢–û–ì–û –ü–û –í–°–ï–ú –ü–û–ú–ï–©–ï–ù–ò–Ø–ú:**")
                if summary_start != -1:
                    summary = result_text[summary_start:]
                    await callback.message.answer(
                        summary,
                        parse_mode="Markdown"
                    )
        else:
            await callback.message.edit_text(
                result_text,
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode="Markdown"
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback.answer("‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()


@router.callback_query(F.data == "edit_measurements")
async def edit_measurements(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"""
    await start_manual_input(callback, state)


@router.callback_query(F.data == "retry_photo")
async def retry_photo(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
    await state.set_state(CalculationStates.waiting_for_photo)
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å –∑–∞–º–µ—Ä–∞–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è.",
        reply_markup=get_manual_input_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def cancel_calculation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@router.message(F.text == "üìä –ú–æ–∏ —Ä–∞—Å—á–µ—Ç—ã")
async def show_calculations_history(message: types.Message):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await db.get_active_subscription(user_id)
    if subscription == 'free':
        await message.answer(
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n"
            "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫:\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—á–µ—Ç—ã
    calculations = await db.get_user_calculations(user_id, limit=20)
    
    if not calculations:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.")
        return
    
    text = "üìä **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—á–µ—Ç—ã:**\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
    grouped_by_date = {}
    
    for calc in calculations:
        date_str = calc['created_at'][:10]  # YYYY-MM-DD
        if date_str not in grouped_by_date:
            grouped_by_date[date_str] = []
        grouped_by_date[date_str].append(calc)
    
    total_calculations = 0
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ –¥–∞—Ç–∞–º
    for date_str in sorted(grouped_by_date.keys(), reverse=True):
        date_calcs = grouped_by_date[date_str]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
        except:
            formatted_date = date_str
        
        text += f"üìÖ **{formatted_date}** ({len(date_calcs)} —Ä–∞—Å—á–µ—Ç–æ–≤)\n"
        
        for calc in date_calcs:
            total_calculations += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞
            calc_type = calc.get('calculation_type', 'both')
            type_emoji = {
                'perimeter': 'üìê',
                'area': 'üìè', 
                'both': 'üìêüìè'
            }
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
            room_desc = calc.get('room_description', '–ü–æ–º–µ—â–µ–Ω–∏–µ')
            room_type = calc.get('room_type', 'rectangle')
            room_type_text = '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫' if room_type == 'rectangle' else '–°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞'
            
            text += f"  {type_emoji.get(calc_type, 'üìä')} {room_desc}\n"
            text += f"     üè† {room_type_text}"
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if calc.get('perimeter'):
                text += f" | üìê {calc['perimeter']:.1f}–º"
            
            if calc.get('area'):
                text += f" | üìè {calc['area']:.1f}–º¬≤"
            
            # –í—Ä–µ–º—è
            time_str = calc['created_at'][11:16]  # HH:MM
            text += f" | ‚è∞ {time_str}"
            
            text += "\n"
        
        text += "\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 3500:
            text += f"... –∏ –µ—â–µ {len(calculations) - total_calculations} —Ä–∞—Å—á–µ—Ç–æ–≤\n\n"
            text += "üí° –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (—Å–∫–æ—Ä–æ)"
            break
    
    if total_calculations > 0:
        text += f"üìà **–í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–æ:** {total_calculations}\n"
        text += f"üéØ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:** {subscription.title()}"
    
    await message.answer(text, parse_mode="Markdown") 