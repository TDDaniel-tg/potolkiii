from typing import Dict, Any, List, Tuple
import math
from config.settings import settings


class CeilingCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤"""
    
    def calculate_multiple_rooms(self, recognition_data: Dict[str, Any], calculation_type: str, fabric_width: int = None) -> List[Dict[str, Any]]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
        
        Args:
            recognition_data: –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏
            calculation_type: –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞ (perimeter/area/fabric/both/complete)
            fabric_width: –®–∏—Ä–∏–Ω–∞ —Ç–∫–∞–Ω–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è
        """
        results = []
        rooms = recognition_data.get('rooms', [])
        
        for room in rooms:
            room_data = {
                'room_type': room.get('room_type'),
                'measurements': room.get('measurements', [])
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è
            result = self.format_calculation_result(
                calculation_type=calculation_type,
                recognition_data=room_data
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–º–µ—â–µ–Ω–∏–∏
            result['room_number'] = room.get('room_number')
            result['position'] = room.get('position', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            result['confidence'] = room.get('confidence', 0)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
            measurements = room.get('measurements', [])
            room_type = room.get('room_type')
            
            if calculation_type in ['perimeter', 'both', 'complete']:
                perimeter = self.calculate_perimeter(measurements, room_type)
                result['perimeter'] = {
                    'value_cm': round(perimeter, 2),
                    'value_m': round(perimeter / 100, 2),
                    'margin_percent': settings.DEFAULT_PERIMETER_MARGIN
                }
            
            if calculation_type in ['area', 'both', 'complete']:
                area = self.calculate_area(measurements, room_type)
                result['area'] = {
                    'value_cm2': round(area, 2),
                    'value_m2': round(area / 10000, 2),
                    'margin_percent': settings.DEFAULT_AREA_MARGIN
                }
            
            if calculation_type in ['fabric', 'complete']:
                fabric_data = self.calculate_fabric_requirements(measurements, room_type, fabric_width)
                result['fabric'] = fabric_data
            
            results.append(result)
        
        return results
    
    def format_multiple_results_text(self, results: List[Dict[str, Any]], calculation_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π"""
        if not results:
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        text = "üìä **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê**\n\n"
        
        # –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞
        type_descriptions = {
            'perimeter': 'üìê –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ (–¥–ª—è –ø–ª–∏–Ω—Ç—É—Å–∞/–±–∞–≥–µ—Ç–∞)',
            'area': 'üìè –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ (–¥–ª—è –ø–æ–ª–æ—Ç–Ω–∞ –ø–æ—Ç–æ–ª–∫–∞)',
            'fabric': 'üßµ –†–∞—Å—á–µ—Ç —Ç–∫–∞–Ω–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤)',
            'both': 'üìêüìè –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–ø–µ—Ä–∏–º–µ—Ç—Ä + –ø–ª–æ—â–∞–¥—å)',
            'complete': 'üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)'
        }
        
        text += f"{type_descriptions.get(calculation_type, '–†–∞—Å—á–µ—Ç')}\n"
        text += f"üè† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–π: {len(results)}\n\n"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è
        total_perimeter = 0
        total_area = 0
        total_fabric = 0
        
        for i, result in enumerate(results):
            room_number = result.get('room_number', i + 1)
            position = result.get('position', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            confidence = result.get('confidence', 0)
            room_type = result.get('room_type', 'unknown')
            
            text += f"{'='*30}\n"
            text += f"üìç **–ü–û–ú–ï–©–ï–ù–ò–ï #{room_number}**\n"
            text += f"üó∫Ô∏è –ü–æ–∑–∏—Ü–∏—è: {position}\n"
            text += f"üè† –¢–∏–ø: {'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫' if room_type == 'rectangle' else '–°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞'}\n"
            
            if confidence:
                text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {int(confidence * 100)}%\n"
            
            text += "\n"
            
            # –†–∞–∑–º–µ—Ä—ã
            measurements = result.get('measurements', [])
            if measurements:
                text += "üìè **–†–∞–∑–º–µ—Ä—ã:**\n"
                for measurement in measurements:
                    side = measurement.get('side', '—Å—Ç–æ—Ä–æ–Ω–∞')
                    value = measurement.get('value', 0)
                    
                    if room_type == 'rectangle':
                        if side == 'length':
                            side_text = '–î–ª–∏–Ω–∞'
                        elif side == 'width':
                            side_text = '–®–∏—Ä–∏–Ω–∞'
                        else:
                            side_text = side
                    else:
                        side_text = f"–°—Ç–æ—Ä–æ–Ω–∞ {side.replace('side', '')}"
                    
                    text += f"  ‚Ä¢ {side_text}: {value} —Å–º\n"
                text += "\n"
            
            # –ü–µ—Ä–∏–º–µ—Ç—Ä
            if 'perimeter' in result:
                perimeter_data = result['perimeter']
                text += "üìê **–ü–ï–†–ò–ú–ï–¢–†:**\n"
                text += f"‚Ä¢ –° –ø—Ä–∏–ø—É—Å–∫–æ–º: {perimeter_data['value_m']:.2f} –º\n"
                
                margin = perimeter_data['margin_percent']
                if margin > 0:
                    clean_perimeter = perimeter_data['value_cm'] / (1 + margin / 100)
                    text += f"‚Ä¢ –ë–µ–∑ –ø—Ä–∏–ø—É—Å–∫–∞: {clean_perimeter / 100:.2f} –º\n"
                    text += f"‚Ä¢ –ü—Ä–∏–ø—É—Å–∫: {margin}%\n"
                text += "\n"
                
                total_perimeter += perimeter_data['value_m']
            
            # –ü–ª–æ—â–∞–¥—å
            if 'area' in result:
                area_data = result['area']
                text += "üìè **–ü–õ–û–©–ê–î–¨:**\n"
                text += f"‚Ä¢ –° –ø—Ä–∏–ø—É—Å–∫–æ–º: {area_data['value_m2']:.2f} –º¬≤\n"
                
                margin = area_data['margin_percent']
                if margin > 0:
                    clean_area = area_data['value_cm2'] / (1 + margin / 100)
                    text += f"‚Ä¢ –ë–µ–∑ –ø—Ä–∏–ø—É—Å–∫–∞: {clean_area / 10000:.2f} –º¬≤\n"
                    text += f"‚Ä¢ –ü—Ä–∏–ø—É—Å–∫: {margin}%\n"
                text += "\n"
                
                total_area += area_data['value_m2']
            
            # –¢–∫–∞–Ω—å
            if 'fabric' in result:
                fabric_text = self.format_fabric_calculation_text(result['fabric'])
                text += fabric_text
                
                total_fabric += result['fabric']['total_length_m']
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
        if len(results) > 1:
            text += f"{'='*30}\n"
            text += "üìä **–ò–¢–û–ì–û –ü–û –í–°–ï–ú –ü–û–ú–ï–©–ï–ù–ò–Ø–ú:**\n\n"
            
            if total_perimeter > 0:
                text += f"üìê –û–±—â–∏–π –ø–µ—Ä–∏–º–µ—Ç—Ä: **{total_perimeter:.2f} –º**\n"
                text += f"üí∞ –ü–ª–∏–Ω—Ç—É—Å/–±–∞–≥–µ—Ç: ~{total_perimeter:.1f} –º\n\n"
            
            if total_area > 0:
                text += f"üìè –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: **{total_area:.2f} –º¬≤**\n"
                text += f"üí∞ –ü–æ–ª–æ—Ç–Ω–æ –ø–æ—Ç–æ–ª–∫–∞: ~{total_area:.1f} –º¬≤\n\n"
            
            if total_fabric > 0:
                text += f"üßµ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–∫–∞–Ω–∏: **{total_fabric:.2f} –º**\n"
                text += f"üí∞ –¢–∫–∞–Ω—å –∫ –∑–∞–∫–∞–∑—É: ~{total_fabric + len(results) * 0.5:.1f} –º\n\n"
            
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–µ:**\n"
            if total_perimeter > 0:
                text += f"‚Ä¢ –ü–ª–∏–Ω—Ç—É—Å/–±–∞–≥–µ—Ç: {total_perimeter * 1.05:.1f} –º (—Å –∑–∞–ø–∞—Å–æ–º 5%)\n"
            if total_area > 0:
                text += f"‚Ä¢ –ü–æ–ª–æ—Ç–Ω–æ: {total_area * 1.02:.1f} –º¬≤ (—Å –∑–∞–ø–∞—Å–æ–º 2%)\n"
            if total_fabric > 0:
                text += f"‚Ä¢ –¢–∫–∞–Ω—å: {total_fabric + len(results) * 0.5:.1f} –º (—Å –∑–∞–ø–∞—Å–æ–º –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º)\n"
        
        return text
    
    def calculate_perimeter(self, measurements: List[Dict[str, Any]], 
                          room_type: str, 
                          margin_percent: int = None) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä –ø–æ–º–µ—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–ø—É—Å–∫–∞
        
        Args:
            measurements: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            room_type: –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è (rectangle/complex)
            margin_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        
        Returns:
            –ü–µ—Ä–∏–º–µ—Ç—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–ø—É—Å–∫–∞
        """
        if margin_percent is None:
            margin_percent = settings.DEFAULT_PERIMETER_MARGIN
        
        if room_type == "rectangle":
            # –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: P = 2 * (–¥–ª–∏–Ω–∞ + —à–∏—Ä–∏–Ω–∞)
            length = 0
            width = 0
            
            for measurement in measurements:
                if measurement.get('side') == 'length':
                    length = measurement.get('value', 0)
                elif measurement.get('side') == 'width':
                    width = measurement.get('value', 0)
            
            perimeter = 2 * (length + width)
        else:
            # –î–ª—è —Å–ª–æ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã: —Å—É–º–º–∞ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω
            perimeter = sum(m.get('value', 0) for m in measurements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–ø—É—Å–∫
        return perimeter * (1 + margin_percent / 100)
    
    def calculate_area(self, measurements: List[Dict[str, Any]], 
                      room_type: str, 
                      margin_percent: int = None) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–ø—É—Å–∫–∞
        
        Args:
            measurements: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            room_type: –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è (rectangle/complex)
            margin_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        
        Returns:
            –ü–ª–æ—â–∞–¥—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–ø—É—Å–∫–∞
        """
        if margin_percent is None:
            margin_percent = settings.DEFAULT_AREA_MARGIN
        
        if room_type == "rectangle":
            # –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: S = –¥–ª–∏–Ω–∞ * —à–∏—Ä–∏–Ω–∞
            length = 0
            width = 0
            
            for measurement in measurements:
                if measurement.get('side') == 'length':
                    length = measurement.get('value', 0)
                elif measurement.get('side') == 'width':
                    width = measurement.get('value', 0)
            
            area = length * width
        else:
            # –î–ª—è —Å–ª–æ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ä–∞–∑–º–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –æ–±—Ö–æ–¥–∞
            area = self._calculate_polygon_area(measurements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–ø—É—Å–∫
        return area * (1 + margin_percent / 100)
    
    def _calculate_polygon_area(self, measurements: List[Dict[str, Any]]) -> float:
        """
        –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        """
        if len(measurements) < 3:
            return 0
        
        # –ë–µ—Ä–µ–º –¥–≤–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        values = sorted([m.get('value', 0) for m in measurements], reverse=True)
        if len(values) >= 2:
            return values[0] * values[1]
        return 0
    
    def format_calculation_result(self, 
                                calculation_type: str,
                                recognition_data: Dict[str, Any],
                                perimeter: float = None,
                                area: float = None,
                                perimeter_margin: int = None,
                                area_margin: int = None) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞
        """
        result = {
            'calculation_type': calculation_type,
            'room_type': recognition_data.get('room_type'),
            'measurements': recognition_data.get('measurements', [])
        }
        
        if perimeter is not None:
            result['perimeter'] = {
                'value_cm': round(perimeter, 2),
                'value_m': round(perimeter / 100, 2),
                'margin_percent': perimeter_margin or settings.DEFAULT_PERIMETER_MARGIN
            }
        
        if area is not None:
            result['area'] = {
                'value_cm2': round(area, 2),
                'value_m2': round(area / 10000, 2),
                'margin_percent': area_margin or settings.DEFAULT_AREA_MARGIN
            }
        
        return result
    
    def format_result_text(self, result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
        text = "üìä **–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê**\n\n"
        
        # –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞
        calc_type = result.get('calculation_type', '')
        if calc_type == 'perimeter':
            text += "üìê –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ (–¥–ª—è –ø–ª–∏–Ω—Ç—É—Å–∞/–±–∞–≥–µ—Ç–∞)\n"
        elif calc_type == 'area':
            text += "üìè –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ (–¥–ª—è –ø–æ–ª–æ—Ç–Ω–∞ –ø–æ—Ç–æ–ª–∫–∞)\n"
        elif calc_type == 'both':
            text += "üìêüìè –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–ø–µ—Ä–∏–º–µ—Ç—Ä + –ø–ª–æ—â–∞–¥—å)\n"
        
        text += "\n"
        
        # –ü–µ—Ä–∏–º–µ—Ç—Ä
        if 'perimeter' in result:
            perimeter_data = result['perimeter']
            text += "**–ü–ï–†–ò–ú–ï–¢–†:**\n"
            text += f"‚Ä¢ –ß–∏—Å—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {perimeter_data['value_m']:.2f} –º "
            text += f"({perimeter_data['value_cm']:.0f} —Å–º)\n"
            
            margin = perimeter_data['margin_percent']
            if margin > 0:
                clean_perimeter = perimeter_data['value_cm'] / (1 + margin / 100)
                text += f"‚Ä¢ –ë–µ–∑ –ø—Ä–∏–ø—É—Å–∫–∞: {clean_perimeter / 100:.2f} –º\n"
                text += f"‚Ä¢ –ü—Ä–∏–ø—É—Å–∫: {margin}%\n"
            text += "\n"
        
        # –ü–ª–æ—â–∞–¥—å
        if 'area' in result:
            area_data = result['area']
            text += "**–ü–õ–û–©–ê–î–¨:**\n"
            text += f"‚Ä¢ –ß–∏—Å—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {area_data['value_m2']:.2f} –º¬≤ "
            text += f"({area_data['value_cm2']:.0f} —Å–º¬≤)\n"
            
            margin = area_data['margin_percent']
            if margin > 0:
                clean_area = area_data['value_cm2'] / (1 + margin / 100)
                text += f"‚Ä¢ –ë–µ–∑ –ø—Ä–∏–ø—É—Å–∫–∞: {clean_area / 10000:.2f} –º¬≤\n"
                text += f"‚Ä¢ –ü—Ä–∏–ø—É—Å–∫: {margin}%\n"
            text += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        if 'perimeter' in result:
            text += f"‚Ä¢ –ó–∞–∫—É–ø–∏—Ç–µ –ø–ª–∏–Ω—Ç—É—Å/–±–∞–≥–µ—Ç: {result['perimeter']['value_m']:.1f} –º\n"
        if 'area' in result:
            text += f"‚Ä¢ –ó–∞–∫—É–ø–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ: {result['area']['value_m2']:.1f} –º¬≤\n"
        
        return text
    
    def parse_manual_input(self, text: str, calculation_type: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
            calculation_type: –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ recognition_data (–¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è)
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        import re
        numbers = re.findall(r'(\d+(?:\.\d+)?)\s*(?:—Å–º|–º|–º–º)?', text)
        
        if not numbers:
            return None
        
        measurements = []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
        values = [float(n) for n in numbers]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
        if len(values) == 2:
            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            length = max(values)
            width = min(values)
            measurements = [
                {"side": "length", "value": length * 100 if length < 100 else length, "unit": "cm"},
                {"side": "width", "value": width * 100 if width < 100 else width, "unit": "cm"}
            ]
            room_type = "rectangle"
        else:
            # –°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞
            for i, value in enumerate(values):
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 100, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–µ—Ç—Ä—ã
                if value < 100:
                    value = value * 100
                measurements.append({
                    "side": f"side{i+1}", 
                    "value": value, 
                    "unit": "cm"
                })
            room_type = "complex"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –º–∞—Å—Å–∏–≤–æ–º rooms
        return {
            "rooms": [{
                "room_number": 1,
                "room_type": room_type,
                "measurements": measurements,
                "position": "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥",
                "confidence": 1.0
            }],
            "total_rooms_found": 1,
            "notes": "–†—É—á–Ω–æ–π –≤–≤–æ–¥"
        }
    
    def calculate_fabric_requirements(self, measurements: List[Dict[str, Any]], 
                                     room_type: str, 
                                     fabric_width: int = None) -> Dict[str, Any]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∫–∞–Ω–∏
        
        Args:
            measurements: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            room_type: –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
            fabric_width: –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ –≤ —Å–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ç–∫–∞–Ω–∏
        """
        if fabric_width is None:
            fabric_width = settings.DEFAULT_FABRIC_WIDTH
        
        if room_type == "rectangle":
            return self._calculate_rectangle_fabric(measurements, fabric_width)
        else:
            return self._calculate_complex_fabric(measurements, fabric_width)
    
    def _calculate_rectangle_fabric(self, measurements: List[Dict[str, Any]], 
                                   fabric_width: int) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Ç–∫–∞–Ω–∏ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è"""
        length = 0
        width = 0
        
        for measurement in measurements:
            if measurement.get('side') == 'length':
                length = measurement.get('value', 0)
            elif measurement.get('side') == 'width':
                width = measurement.get('value', 0)
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–∫—Ä–æ—è
        option1 = self._calculate_fabric_option(length, width, fabric_width)  # –î–ª–∏–Ω–∞ –≤–¥–æ–ª—å —Ä—É–ª–æ–Ω–∞
        option2 = self._calculate_fabric_option(width, length, fabric_width)  # –®–∏—Ä–∏–Ω–∞ –≤–¥–æ–ª—å —Ä—É–ª–æ–Ω–∞
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–º–µ–Ω—å—à–µ —Ä–∞—Å—Ö–æ–¥)
        if option1['total_length'] <= option2['total_length']:
            optimal = option1
            optimal['direction'] = '–¥–ª–∏–Ω–∞ –≤–¥–æ–ª—å —Ä—É–ª–æ–Ω–∞'
        else:
            optimal = option2  
            optimal['direction'] = '—à–∏—Ä–∏–Ω–∞ –≤–¥–æ–ª—å —Ä—É–ª–æ–Ω–∞'
        
        optimal['room_length'] = length
        optimal['room_width'] = width
        optimal['fabric_width'] = fabric_width
        
        return optimal
    
    def _calculate_complex_fabric(self, measurements: List[Dict[str, Any]], 
                                 fabric_width: int) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Ç–∫–∞–Ω–∏ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã"""
        values = [m.get('value', 0) for m in measurements]
        max_length = max(values) if values else 0
        second_max = sorted(values, reverse=True)[1] if len(values) > 1 else max_length
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        option1 = self._calculate_fabric_option(max_length, second_max, fabric_width)
        option2 = self._calculate_fabric_option(second_max, max_length, fabric_width)
        
        if option1['total_length'] <= option2['total_length']:
            optimal = option1
            optimal['direction'] = '–ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ'
        else:
            optimal = option2
            optimal['direction'] = '–ø–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ'
        
        optimal['room_length'] = max_length
        optimal['room_width'] = second_max
        optimal['fabric_width'] = fabric_width
        optimal['note'] = '–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è —Å–ª–æ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã'
        
        return optimal
    
    def _calculate_fabric_option(self, room_length: float, room_width: float, 
                                fabric_width: int) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å–∫—Ä–æ—è"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–ø—É—Å–∫–∏ –ø–æ –∫—Ä–∞—è–º
        length_with_allowance = room_length + (settings.FABRIC_EDGE_ALLOWANCE * 2)
        width_with_allowance = room_width + (settings.FABRIC_EDGE_ALLOWANCE * 2)
        
        if fabric_width >= width_with_allowance:
            # –ú–æ–∂–Ω–æ –∫—Ä–æ–∏—Ç—å —Ü–µ–ª—å–Ω—ã–º –∫—É—Å–∫–æ–º
            strips_count = 1
            total_length = length_with_allowance
            seam_allowance = 0
            
        else:
            # –ù—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–æ—Å
            strips_count = math.ceil(width_with_allowance / fabric_width)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–ø—É—Å–∫–∏ –Ω–∞ —à–≤—ã
            seam_allowance = (strips_count - 1) * settings.FABRIC_SEAM_ALLOWANCE
            total_length = (length_with_allowance * strips_count) + seam_allowance
        
        return {
            'strips_count': strips_count,
            'strip_length': length_with_allowance,
            'total_length': total_length,
            'total_length_m': round(total_length / 100, 2),
            'seam_allowance': seam_allowance,
            'edge_allowance': settings.FABRIC_EDGE_ALLOWANCE * 2,
            'waste_percent': round(((total_length - (room_length * room_width / (fabric_width / 100))) / total_length) * 100, 1)
        }
    
    def format_fabric_calculation_text(self, fabric_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–∫–∞–Ω–∏"""
        if not fabric_data:
            return ""
        
        text = "\nüßµ **–†–ê–°–ß–ï–¢ –¢–ö–ê–ù–ò:**\n"
        text += f"üìè –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞: {fabric_data['fabric_width']} —Å–º\n"
        text += f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {fabric_data.get('direction', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        text += f"üìä **–î–µ—Ç–∞–ª–∏ —Ä–∞—Å–∫—Ä–æ—è:**\n"
        text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ—Å: {fabric_data['strips_count']}\n"
        text += f"‚Ä¢ –î–ª–∏–Ω–∞ –ø–æ–ª–æ—Å—ã: {fabric_data['strip_length']:.0f} —Å–º\n"
        
        if fabric_data['seam_allowance'] > 0:
            text += f"‚Ä¢ –ü—Ä–∏–ø—É—Å–∫ –Ω–∞ —à–≤—ã: {fabric_data['seam_allowance']} —Å–º\n"
        
        text += f"‚Ä¢ –ü—Ä–∏–ø—É—Å–∫ –ø–æ –∫—Ä–∞—è–º: {fabric_data['edge_allowance']} —Å–º\n"
        text += f"‚Ä¢ –û—Ç—Ö–æ–¥—ã: ~{fabric_data['waste_percent']}%\n\n"
        
        text += f"üéØ **–ò–¢–û–ì–û –¢–ö–ê–ù–ò: {fabric_data['total_length_m']} –º**\n"
        text += f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–∫–∞–∑–∞—Ç—å: {fabric_data['total_length_m'] + 0.5:.1f} –º (—Å –∑–∞–ø–∞—Å–æ–º)\n"
        
        if fabric_data.get('note'):
            text += f"\nüìù {fabric_data['note']}\n"
        
        return text


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
calculator = CeilingCalculator() 