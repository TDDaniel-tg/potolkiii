import google.generativeai as genai
import json
from typing import Dict, Any, Optional, List
from PIL import Image
import io
from config.settings import settings
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=settings.GEMINI_API_KEY)


class GeminiRecognizer:
    def __init__(self):
        self.model = genai.GenerativeModel(settings.GEMINI_MODEL)
        self.recognition_prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ä–∞–º–∏ –ø–æ–º–µ—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤.
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        1. –ù–∞–π—Ç–∏ –í–°–ï —á–µ—Ä—Ç–µ–∂–∏/—Å—Ö–µ–º—ã –ø–æ–º–µ—â–µ–Ω–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è –Ω–∞–π—Ç–∏ –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (—Å–º), –º–µ—Ç—Ä–∞—Ö (–º) –∏–ª–∏ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö (–º–º)
        3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º—É –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞)
        4. –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –∫ –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
        5. –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å—á–∏—Ç–∞—Ç—å —á—Ç–æ —ç—Ç–æ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã
        6. –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        7. –ü—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ª–∏—Å—Ç–µ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
        
        –í–ê–ñ–ù–û: –ù–∞–π–¥–∏ –í–°–ï –ø–æ–º–µ—â–µ–Ω–∏—è –Ω–∞ –ª–∏—Å—Ç–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ!
        
        –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
        {
            "rooms": [
                {
                    "room_number": 1,
                    "room_type": "rectangle",
                    "measurements": [
                        {"side": "length", "value": 350, "unit": "cm", "original_text": "350"},
                        {"side": "width", "value": 280, "unit": "cm", "original_text": "280"}
                    ],
                    "position": "–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª",
                    "confidence": 0.95
                },
                {
                    "room_number": 2,
                    "room_type": "complex",
                    "measurements": [
                        {"side": "side1", "value": 300, "unit": "cm", "original_text": "30"},
                        {"side": "side2", "value": 250, "unit": "cm", "original_text": "25"},
                        {"side": "side3", "value": 150, "unit": "cm", "original_text": "15"}
                    ],
                    "position": "–≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª",
                    "confidence": 0.90
                }
            ],
            "total_rooms_found": 2,
            "notes": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å"
        }
        
        –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
        - length - –¥–ª–∏–Ω–∞ (–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
        - width - —à–∏—Ä–∏–Ω–∞ (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
        
        –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–π:
        - side1, side2, side3 –∏ —Ç.–¥. –ø–æ –ø–æ—Ä—è–¥–∫—É –æ–±—Ö–æ–¥–∞ –∫–æ–Ω—Ç—É—Ä–∞
        
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –ø–æ–∑–∏—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è –Ω–∞ –ª–∏—Å—Ç–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        """
    
    async def recognize_measurements(self, image_data: bytes) -> Optional[Dict[str, Any]]:
        """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(io.BytesIO(image_data))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            response = self.model.generate_content([self.recognition_prompt, image])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            response_text = response.text.strip()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            if response_text.startswith('{') and response_text.endswith('}'):
                result = json.loads(response_text)
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–∏–º–æ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
                import re
                json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
                if json_match:
                    result = json.loads(json_match.group())
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞: {response_text}")
                    return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
            for room in result.get('rooms', []):
                for measurement in room.get('measurements', []):
                    value = measurement['value']
                    unit = measurement.get('unit', 'cm')
                    
                    if unit == 'm':
                        measurement['value'] = value * 100
                        measurement['unit'] = 'cm'
                    elif unit == 'mm':
                        measurement['value'] = value / 10
                        measurement['unit'] = 'cm'
            
            return result
            
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None
    
    async def validate_recognition(self, recognition_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not recognition_data:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if 'rooms' not in recognition_data:
            return False
        
        rooms = recognition_data.get('rooms', [])
        if not rooms:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
        for room in rooms:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è
            required_fields = ['room_type', 'measurements', 'room_number']
            for field in required_fields:
                if field not in room:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            measurements = room.get('measurements', [])
            if room['room_type'] == 'rectangle' and len(measurements) < 2:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
            for measurement in measurements:
                if measurement.get('value', 0) <= 0:
                    return False
        
        return True
    
    def format_measurements_text(self, recognition_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
        if not recognition_data:
            return "–†–∞–∑–º–µ—Ä—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã"
        
        rooms = recognition_data.get('rooms', [])
        total_rooms = recognition_data.get('total_rooms_found', len(rooms))
        
        if not rooms:
            return "–ü–æ–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        text = f"üè† –ù–∞–π–¥–µ–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–π: {total_rooms}\n\n"
        
        for room in rooms:
            room_number = room.get('room_number', '?')
            room_type = room.get('room_type', 'unknown')
            measurements = room.get('measurements', [])
            confidence = room.get('confidence', 0)
            position = room.get('position', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            text += f"üìç **–ü–æ–º–µ—â–µ–Ω–∏–µ #{room_number}** ({position})\n"
            text += f"üè† –¢–∏–ø: {'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫' if room_type == 'rectangle' else '–°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞'}\n"
            text += f"üìè –†–∞–∑–º–µ—Ä—ã:\n"
            
            for measurement in measurements:
                side = measurement.get('side', '—Å—Ç–æ—Ä–æ–Ω–∞')
                value = measurement.get('value', 0)
                original = measurement.get('original_text', '')
                
                if room_type == 'rectangle':
                    if side == 'length':
                        side_text = '–î–ª–∏–Ω–∞'
                    elif side == 'width':
                        side_text = '–®–∏—Ä–∏–Ω–∞'
                    else:
                        side_text = side
                else:
                    side_text = f"–°—Ç–æ—Ä–æ–Ω–∞ {side.replace('side', '')}"
                
                text += f"  ‚Ä¢ {side_text}: {value} —Å–º"
                if original:
                    text += f" (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {original})"
                text += "\n"
            
            if confidence:
                text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {int(confidence * 100)}%\n"
            
            text += "\n"
        
        return text


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
recognizer = GeminiRecognizer() 