from typing import Dict, Any, List, Tuple, Optional
import math
from config.settings import settings


class CeilingMaterialsCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤"""
    
    def __init__(self):
        self.coeffs = settings.CALCULATION_COEFFICIENTS
    
    def calculate_profile(self, perimeter: float) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è (–≠—Ç–∞–ø 2)
        
        Args:
            perimeter: –ü–µ—Ä–∏–º–µ—Ç—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ
        """
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∑–∞–ø–∞—Å–æ–º 5%
        profile_quantity = perimeter * (1 + self.coeffs["profile_margin"])
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—é–±–µ–ª—å-–≥–≤–æ–∑–¥–µ–π (1 –∫–∞–∂–¥—ã–µ 30 —Å–º)
        dowel_nails_count = math.ceil(perimeter * self.coeffs["dowel_nails_per_meter"])
        
        return {
            "profile_quantity": round(profile_quantity, 2),
            "dowel_nails_count": dowel_nails_count,
            "margin_percent": self.coeffs["profile_margin"] * 100
        }
    
    def calculate_spot_lights(self, count: int, diameter: int) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —Ç–æ—á–µ—á–Ω—ã—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤
            diameter: –î–∏–∞–º–µ—Ç—Ä –≤ –º–º
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞—Ö
        """
        # –ü–æ–¥–≤–µ—Å—ã –¥–ª—è —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ (–ø–æ 2 –Ω–∞ –∫–∞–∂–¥—ã–π)
        hangers_count = count * self.coeffs["hangers_per_spotlight"]
        
        return {
            "count": count,
            "diameter": diameter,
            "hangers_count": hangers_count
        }
    
    def calculate_light_lines(self, meters: float, corners: int, crossings: int) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —Å–≤–µ—Ç–æ–≤—ã—Ö –ª–∏–Ω–∏–π
        
        Args:
            meters: –ü–æ–≥–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä—ã —Å–≤–µ—Ç–æ–≤—ã—Ö –ª–∏–Ω–∏–π
            corners: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤ 90¬∞
            crossings: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏–π
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–≤–µ—Ç–æ–≤—ã—Ö –ª–∏–Ω–∏—è—Ö
        """
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å–µ–∏–≤–∞—Ç–µ–ª—è
        corner_margin = corners * self.coeffs["light_line_corner_margin"]
        cross_margin = crossings * self.coeffs["light_line_cross_margin"]
        diffuser_length = meters + corner_margin + cross_margin
        
        return {
            "meters": meters,
            "corners": corners,
            "crossings": crossings,
            "diffuser_length": round(diffuser_length, 2),
            "corner_margin": corner_margin,
            "cross_margin": cross_margin
        }
    
    def calculate_floating_light(self, meters: float) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –ø–∞—Ä—è—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        
        Args:
            meters: –ü–æ–≥–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä—ã –ø–∞—Ä—è—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞—Ä—è—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–µ
        """
        # –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–∞—Ä—è—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ = –≤–≤–µ–¥–µ–Ω–Ω—ã–º –º–µ—Ç—Ä–∞–º
        profile_meters = meters
        
        # –†–∞—Å—Å–µ–∏–≤–∞—Ç–µ–ª—å —Å –∑–∞–ø–∞—Å–æ–º 5%
        diffuser_meters = meters * (1 + self.coeffs["floating_diffuser_margin"])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–º–æ—Ä–µ–∑—ã (3 –Ω–∞ –º–µ—Ç—Ä)
        additional_screws = math.ceil(meters * self.coeffs["floating_screws_per_meter"])
        
        return {
            "meters": meters,
            "profile_meters": profile_meters,
            "diffuser_meters": round(diffuser_meters, 2),
            "additional_screws": additional_screws,
            "diffuser_margin_percent": self.coeffs["floating_diffuser_margin"] * 100
        }
    
    def calculate_curtain_niche_u_shaped(self, meters: float) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –ü-–æ–±—Ä–∞–∑–Ω–æ–π –Ω–∏—à–∏ –ø–æ–¥ —à—Ç–æ—Ä—ã
        
        Args:
            meters: –ü–æ–≥–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä—ã
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∏—à–µ
        """
        ends_count = self.coeffs["curtain_ends_count"]  # 2 —Ç–æ—Ä—Ü–∞
        tape_meters = meters * self.coeffs["curtain_tape_per_meter"]  # 2–º –ª–µ–Ω—Ç—ã –Ω–∞ 1–º –ø—Ä–æ—Ñ–∏–ª—è
        brackets_count = math.ceil(meters * self.coeffs["curtain_brackets_per_meter"])  # 2 –Ω–∞ –º–µ—Ç—Ä
        screws_count = brackets_count * self.coeffs["curtain_screws_per_bracket"]  # 2 –Ω–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω
        
        return {
            "meters": meters,
            "ends_count": ends_count,
            "tape_meters": tape_meters,
            "brackets_count": brackets_count,
            "screws_count": screws_count
        }
    
    def calculate_curtain_niche_l_shaped(self, meters: float) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –ì-–æ–±—Ä–∞–∑–Ω–æ–π –Ω–∏—à–∏ –ø–æ–¥ —à—Ç–æ—Ä—ã
        
        Args:
            meters: –ü–æ–≥–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä—ã
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∏—à–µ
        """
        ends_count = self.coeffs["curtain_ends_count"]  # 2 —Ç–æ—Ä—Ü–∞
        brackets_count = math.ceil(meters * self.coeffs["curtain_brackets_per_meter"])  # 2 –Ω–∞ –º–µ—Ç—Ä
        screws_count = brackets_count * self.coeffs["curtain_screws_per_bracket"]  # 2 –Ω–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω
        
        return {
            "meters": meters,
            "ends_count": ends_count,
            "brackets_count": brackets_count,
            "screws_count": screws_count
        }
    
    def calculate_timber(self, meters: float) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –±—Ä—É—Å–∞
        
        Args:
            meters: –ü–æ–≥–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä—ã –±—Ä—É—Å–∞
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±—Ä—É—Å–µ
        """
        brackets_count = math.ceil(meters * self.coeffs["timber_brackets_per_meter"])  # 2 –Ω–∞ –º–µ—Ç—Ä
        
        return {
            "meters": meters,
            "brackets_count": brackets_count
        }
    
    def calculate_totals(self, area: float, perimeter: float, 
                        lighting_data: Dict[str, Any] = None,
                        curtain_data: Dict[str, Any] = None,
                        floating_data: Dict[str, Any] = None,
                        timber_data: Dict[str, Any] = None,
                        profile_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏—Ç–æ–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        
        Args:
            area: –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º¬≤
            perimeter: –ü–µ—Ä–∏–º–µ—Ç—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º
            lighting_data: –î–∞–Ω–Ω—ã–µ –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏
            curtain_data: –î–∞–Ω–Ω—ã–µ –æ –Ω–∏—à–∞—Ö –ø–æ–¥ —à—Ç–æ—Ä—ã
            floating_data: –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—è—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–µ
            timber_data: –î–∞–Ω–Ω—ã–µ –æ –±—Ä—É—Å–µ
            profile_data: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ
            
        Returns:
            Dict —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
        """
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–≤–µ—Å–æ–≤
        base_hangers = math.ceil(area * self.coeffs["hangers_per_sqm"])  # 1 –Ω–∞ 2 –º¬≤
        lighting_hangers = 0
        
        if lighting_data and lighting_data.get("type") == "spot_lights":
            lighting_hangers = lighting_data.get("hangers_count", 0)
        
        total_hangers = base_hangers + lighting_hangers
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—é–±–µ–ª–µ–π
        profile_dowels = profile_data.get("dowel_nails_count", 0) if profile_data else 0
        curtain_screws = curtain_data.get("screws_count", 0) if curtain_data else 0
        timber_brackets = timber_data.get("brackets_count", 0) if timber_data else 0
        
        total_dowels = profile_dowels + total_hangers + curtain_screws + timber_brackets
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º–æ—Ä–µ–∑–æ–≤ (–∫–ª–æ–ø-—Å–∞–º–æ—Ä–µ–∑—ã)
        base_screws = math.ceil(perimeter * self.coeffs["screws_per_perimeter_meter"])  # 4 –Ω–∞ –º–µ—Ç—Ä
        floating_screws = floating_data.get("additional_screws", 0) if floating_data else 0
        curtain_screws_additional = curtain_data.get("screws_count", 0) if curtain_data else 0
        
        total_screws = base_screws + floating_screws + curtain_screws_additional
        
        # –û–±—ä–µ–º –∫–ª–µ—è
        glue_volume = total_hangers * (self.coeffs["glue_ml_per_hanger"] / 1000)  # –≤ –ª–∏—Ç—Ä–∞—Ö
        
        return {
            "total_hangers": total_hangers,
            "base_hangers": base_hangers,
            "lighting_hangers": lighting_hangers,
            "total_dowels": total_dowels,
            "total_screws": total_screws,
            "base_screws": base_screws,
            "floating_screws": floating_screws,
            "curtain_screws": curtain_screws_additional,
            "glue_volume": round(glue_volume, 3)
        }
    
    def format_estimate(self, perimeter: float, area: float, corners_count: int,
                       profile_type: str, profile_data: Dict[str, Any],
                       lighting_type: str, lighting_data: Dict[str, Any],
                       curtain_data: Optional[Dict[str, Any]] = None,
                       timber_data: Optional[Dict[str, Any]] = None,
                       fastener_type: str = None,
                       totals: Dict[str, Any] = None) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–º–µ—Ç—É
        
        Returns:
            –¢–µ–∫—Å—Ç —Å–º–µ—Ç—ã
        """
        estimate = "üìã **–°–ú–ï–¢–ê –ù–ê–¢–Ø–ñ–ù–û–ì–û –ü–û–¢–û–õ–ö–ê**\n\n"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è
        estimate += "üè† **–ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ú–ï–©–ï–ù–ò–Ø:**\n"
        estimate += f"‚Ä¢ –ü–µ—Ä–∏–º–µ—Ç—Ä: {perimeter:.2f} –º\n"
        estimate += f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {area:.2f} –º¬≤\n"
        estimate += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤: {corners_count}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        estimate += "üî® **–û–°–ù–û–í–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´:**\n"
        profile_name = settings.PROFILE_TYPES.get(profile_type, profile_type)
        estimate += f"‚Ä¢ –¢–∏–ø –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}\n"
        estimate += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª—è: {profile_data.get('profile_quantity', 0):.2f} –º\n"
        estimate += f"‚Ä¢ –ü–æ–ª–æ—Ç–Ω–æ –Ω–∞—Ç—è–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞: {area:.2f} –º¬≤\n\n"
        
        # –û—Å–≤–µ—â–µ–Ω–∏–µ
        estimate += "üí° **–û–°–í–ï–©–ï–ù–ò–ï:**\n"
        lighting_name = settings.LIGHTING_TYPES.get(lighting_type, lighting_type)
        estimate += f"‚Ä¢ –¢–∏–ø: {lighting_name}\n"
        
        if lighting_type == "spot_lights":
            estimate += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤: {lighting_data.get('count', 0)} —à—Ç\n"
            estimate += f"‚Ä¢ –î–∏–∞–º–µ—Ç—Ä: {lighting_data.get('diameter', 0)} –º–º\n"
            estimate += f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–≤–µ—Å—ã: {lighting_data.get('hangers_count', 0)} —à—Ç\n"
        elif lighting_type == "light_lines":
            estimate += f"‚Ä¢ –î–ª–∏–Ω–∞ —Å–≤–µ—Ç–æ–≤—ã—Ö –ª–∏–Ω–∏–π: {lighting_data.get('meters', 0)} –º\n"
            estimate += f"‚Ä¢ –£–≥–ª—ã 90¬∞: {lighting_data.get('corners', 0)} —à—Ç\n"
            estimate += f"‚Ä¢ –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç—å—è: {lighting_data.get('crossings', 0)} —à—Ç\n"
            estimate += f"‚Ä¢ –†–∞—Å—Å–µ–∏–≤–∞—Ç–µ–ª—å: {lighting_data.get('diffuser_length', 0):.2f} –º\n"
        elif lighting_type == "floating_light":
            estimate += f"‚Ä¢ –î–ª–∏–Ω–∞ –ø–∞—Ä—è—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏: {lighting_data.get('meters', 0)} –º\n"
            estimate += f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏: {lighting_data.get('profile_meters', 0)} –º\n"
            estimate += f"‚Ä¢ –†–∞—Å—Å–µ–∏–≤–∞—Ç–µ–ª—å: {lighting_data.get('diffuser_meters', 0):.2f} –º\n"
            estimate += f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–º–æ—Ä–µ–∑—ã: {lighting_data.get('additional_screws', 0)} —à—Ç\n"
        
        estimate += "\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        estimate += "‚ûï **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:**\n"
        
        if curtain_data:
            curtain_type_name = settings.CURTAIN_NICHE_TYPES.get(curtain_data.get('type'), '–ù–∏—à–∞ –ø–æ–¥ —à—Ç–æ—Ä—ã')
            estimate += f"‚Ä¢ {curtain_type_name}: {curtain_data.get('meters', 0)} –º\n"
            
            if curtain_data.get('type') == 'u_shaped':
                estimate += f"  - –¢–æ—Ä—Ü—ã: {curtain_data.get('ends_count', 0)} —à—Ç\n"
                estimate += f"  - –ë–∞–Ω–¥–∞–∂–Ω–∞—è –ª–µ–Ω—Ç–∞: {curtain_data.get('tape_meters', 0)} –º\n"
            
            estimate += f"  - –ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã: {curtain_data.get('brackets_count', 0)} —à—Ç\n"
            estimate += f"  - –°–∞–º–æ—Ä–µ–∑—ã —Å–æ —Å–≤–µ—Ä–ª–æ–º: {curtain_data.get('screws_count', 0)} —à—Ç\n"
        else:
            estimate += "‚Ä¢ –ù–∏—à–∏ –ø–æ–¥ —à—Ç–æ—Ä—ã: –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è\n"
        
        if timber_data:
            estimate += f"‚Ä¢ –ë—Ä—É—Å: {timber_data.get('meters', 0)} –º\n"
            estimate += f"  - –ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã: {timber_data.get('brackets_count', 0)} —à—Ç\n"
        else:
            estimate += "‚Ä¢ –ë—Ä—É—Å: –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
        
        estimate += "\n"
        
        # –ö—Ä–µ–ø–µ–∂ –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
        estimate += "üî© **–ö–†–ï–ü–ï–ñ –ò –†–ê–°–•–û–î–ù–ò–ö–ò:**\n"
        
        if fastener_type:
            fastener_name = settings.FASTENER_TYPES.get(fastener_type, fastener_type)
            estimate += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–µ–ø–µ–∂: {fastener_name}\n"
        
        if totals:
            estimate += f"‚Ä¢ –î—é–±–µ–ª–∏/–¥—é–±–µ–ª—å-–≥–≤–æ–∑–¥–∏: {totals.get('total_dowels', 0)} —à—Ç\n"
            estimate += f"‚Ä¢ –°–∞–º–æ—Ä–µ–∑—ã (–∫–ª–æ–ø): {totals.get('total_screws', 0)} —à—Ç\n"
            estimate += f"‚Ä¢ –ü–æ–¥–≤–µ—Å—ã: {totals.get('total_hangers', 0)} —à—Ç\n"
            estimate += f"‚Ä¢ –ö–ª–µ–π: {totals.get('glue_volume', 0):.2f} –ª\n"
        
        estimate += "\n"
        estimate += "‚úÖ **–°–º–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!**"
        
        return estimate


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
ceiling_calc = CeilingMaterialsCalculator() 